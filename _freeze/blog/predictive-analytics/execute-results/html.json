{
  "hash": "3483d6dd769d34133da9c82a26324e9b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Predictive Analytics within healthcare - Random Forest models for predicting length of stay\"\ndate: \"27 February 2025\"\ndate-modified: \"28 February 2025\"\ncategories:\n  - Predictive Analytics\n  - Machine Learning\n  - dplyr\n  - SQL\nauthor: \"Joseph Mosley\"\nimage: img/computer-with-analytics.jpg\nimage-alt: \"Graphic of a laptop with stylised analytics on the screen.\"\nsubtitle: \"A brief overview of my journey using R to develop a predictive model for length of stay.\"\neval: false\n---\n\n## Introduction\n\nHi! This is my first blog post here and I'm excited to have the chance to share my thoughts with you on this topic, as it is something that has seemingly exploded in popularity over the last few years. For context, I currently work as an \"Information Development Analyst\" within an acute NHS trust. So naturally, I'm constantly exploring new ways of working within healthcare analytics and business intelligence, as well as aspects of data and technology that I might just think are interesting! This post specifically focuses on predictive analytics within R and my journey developing a prediction model within my organisation.\n\nMachine learning for predictive analytics is becoming increasingly popular (and essential) throughout healthcare, particularly within the NHS. Machine learning models within healthcare can be successfully deployed for a variety of use cases. This area of healthcare analytics is constantly growing as new techniques become more prevalent and machine learning resources become more accessible to information professionals based within NHS organisations. While some of these solutions are deployed on a large scale and require the investment of an abundance of time and money, smaller scale models can often be developed in-house, taking advantage of the wide array of tools that R has on offer for machine learning. In this example, I will show how I developed a random forest model to predict whether or not a patient's length of stay was going to be less than (\\<) or greater-than or equal-to (\\>=) 7 days. The data used to train such a model would be available for most data analysts within the NHS through their trust's internal electronic patient record systems.\n\nThe code shown for this particular machine learning task is specific to the context and model discussed in this blog post. This is not a comprehensive guide on how to approach a machine learning task within R or a complete overview of all the relevant considerations necessary. While I hope that readers find this post interesting, anyone considering undertaking something similar should seek the relevant guidance to do so.\n\n::: {.callout-note appearance=\"simple\"}\n## The objective of this model is to classify whether or not a patient's length of stay will be \\< or \\>= 7 days, rather than predicting the exact number of days!\n:::\n\n## Data Set Preparation & Variable Selection\n\nThe variables used in the data set to train the model were selected as it was thought they would be useful as indicators for a patient's length of stay. These included age, elective / non-elective admission, whether the patient was admitted from a nursing home or not, theatre records, the patient's sepsis status and the presence of particular comorbidities (that is previous diagnosis of dementia, chronic obstructive pulmonary disease, heart failure and diabetes).\n\nTo allow the model to be trained on this data, all of the categorical variables had to be re-categorised using \"one hot encoding\", where the values of each of these variables would then be represented in a separate column identified with a 1 or a 0. This alteration allows the input into the model to be numeric. As only categorical variables needed to be encoded, age did not need to be altered.\n\n::: {.callout-note appearance=\"simple\"}\n## For example Instead of the comorbidity columns stating \"Yes\" or \"No\" for each condition, this would be represented with separate columns. These columns would state whether the patient had each relevant diagnosis with a 1 for true and 0 for false.\n:::\n\n## Preparation Of Model\n\nThe R script used to prepare and evaluate this model utilised the following packages: \"stats\", \"dplyr\" and \"randomForest\". Initially, the data set was loaded into R from a CSV file and the columns checked (for example formatting and column names). In this example, the CSV file is referred to as \"DATASET\". Following this, the data set is split into a testing section and a training section. For this I opted for a split of 70% training and 30% testing. Then, the random forest model is built, specifying that the field \"Length.Of.Stay\" is the variable I am looking to predict and that I want to make this prediction based on all of the other variables available in the data set. Lastly, the model accuracy is evaluated through a confusion matrix. This model presents an accuracy of 85.11%, when evaluating the predictions made from the testing data set.\n\n::: {.callout-caution appearance=\"simple\"}\n## In this case, set.seed(x) is important in order to make your results reproducible. If a different seed number was used to re-train the model, your final accuracy score may differ, even though the same data set was used for training.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(stats)\nlibrary(dplyr)\nlibrary(randomForest)\n\n# set seed\nset.seed(10)\n\n# dataset preparation\nResults <- read.csv(\"DATASET\", header = TRUE, stringsAsFactors = TRUE)\n\n# check dataset\nhead(Results)\n\n# split data into testing and training\nindex <- sample(2, nrow(Results), replace = TRUE, prob = c(0.7, 0.3))\n\n# training\nTraining <- Results[index == 1, ]\n\n# testing\nTesting <- Results[index == 2, ]\n\n# build model\nMODEL <- randomForest(Length.Of.Stay ~ ., data = Training)\n\n# evaluate model accuracy through a confusion matrix\nLOS_Pred <- predict(MODEL, Testing)\nTesting$LOS_Pred <- LOS_Pred\n\nCONFUSION_MATRIX <- table(Testing$Length.Of.Stay, Testing$LOS_Pred)\n\nACCURACY <- sum(diag(CONFUSION_MATRIX) / sum(CONFUSION_MATRIX))\nACCURACY\n```\n:::\n\n\n## Interactivity For Users\n\nOnce the model has been created and evaluated for usability, you may want to start thinking about potential methods to make the model accessible within your organisation. Ideally, a user would be able to input values for each variable into the model in as minimal clicks as possible. In this case, I experimented with a shiny application that would likely be the best way for users to input values into the model to receive a prediction.\n\nHowever, it would not be ideal for the user to have to go through clinical notes and various systems to find the information they need for every variable. The solution arrived at for this issue was that a table would be created in SQL containing all of the relevant information for each variable, for any patients that have been admitted on the trust's primary electronic patient record system. The relevant information for all of the variables would then be retrieved from various systems. This would be entirely managed within SQL. The data from SQL would be retrieved for use in R with the \"odbc\" package. In the example shown below, the table that contains a regularly updated feed of daily admissions is referred to as \"\\[Database\\].\\[dbo\\].\\[Table\\]\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load package\nlibrary(odbc)\n\n# connect to sql via odbc\nmyDSN <- \"LOCAL_DSN_NAME\"\n\n# define query\ncon <- dbConnect(odbc::odbc(), dsn = myDSN)\n\n# define query\nMyQuery <- \"SELECT * FROM [Database].[dbo].[Table]\"\n\n# run sql query\nsql_result <- dbGetQuery(con, MyQuery)\n```\n:::\n\n\nBelow, two examples are shown of test data inputted into the shiny app, one returning a prediction of \"0-6 Days\" and one returning a prediction of \"7(+) Days\".\n\n**0-6 Days**\n\n![](img/prediction-tool-less-7-days.jpg){fig-alt=\"Screenshot of length of stay prediction tool input box with prediction less than 7\" fig-align=\"center\"}\n\n**7(+) Days**\n\n![](img/prediction-tool-7-days.png){fig-alt=\"Screenshot of length of stay prediction tool input box with prediction of 7 or more days\" fig-align=\"center\"}\n\n## Considerations\n\nHosting for shiny applications is not currently widely available outside of public facing solutions, which would obviously not be appropriate for something such as this (that is information governance concerns).\n\nOther machine learning model types available in R, such a \"logistic regression\" or \"XGBoost\" could have also been applied here for classification, as an alternative to random forest.\n\nAn NHS organisation may have developed similar machine learning models using alternative methods, such as python rather than R.\n\n## Final Thoughts\n\nIf you are working within business intelligence or data analytics within a healthcare space, you have likely encountered some form of machine learning tool, whether this is something you have developed yourself or made use of from a third-party application. It's important to acknowledge that there are different scales of how far a machine learning model can be implemented within an organisation. How far an NHS trust integrates such technology may entirely depend on their IT infrastructure, budget and resources. However, the machine learning tools available in R certainly lower the barriers to entry if an organisation did wish to incorporate these methods into their analytics. Lastly, while the technology for projects such as this has certainly become more accessible, the time and consideration regarding variable selection, model testing and performance evaluation is still fundamental for a model to be accurate in its predictions and therefore useful from an operational perspective.\n\nThank you for taking the time to read this. Hopefully you found this interesting (and potentially even useful)!\n\n[Image](https://st5.depositphotos.com/68501920/65007/i/450/depositphotos_650073840-stock-photo-minimal-marketing-strategy-concept-business.jpg) from Stock Photos, Royalty Free Laptop with analytics Images \\| Depositphotos\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}