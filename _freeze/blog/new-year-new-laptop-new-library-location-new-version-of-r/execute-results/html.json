{
  "hash": "df2bae27f2570a088e74930dca622615",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"New year, new laptop, new library location, new version of R!\"\ndate: \"17 June 2022\"\ndate-modified: \"27 July 2024\"\ncategories:\n  - R tips\nauthor: Cara Thompson\nimage: img/jason-leung-Xaanw0s0pMk-unsplash.jpg\nimage-alt: \"Photo of confetti\"\nexecute: \n  eval: false\nsubtitle: >\n---\n\nEek? Starting again wasn't nearly as painful as it used to be, thanks to {installr} and the generosity of people posting solutions online.\n\nNew year – time to set up the new laptop! Eek? Well, it wasn't actually that bad! But first, a bit of context.\n\nI had been working on an old laptop that struggled with resource-intensive tasks. My way around that had been to switch from the laptop to my less-readily-accessible desktop for stuff that needed more oomph. Because two devices means two different package libraries, I had thought I was being smart by having my R library in Dropbox: point R to the right location, and tada!, the packages are always stable across the two machines. Plus, in case of catastrophic failure, it's easy to start again. Right? Wrong! So, so very wrong!\n\n### **Keeping packages in Dropbox is a very bad idea**\n\nIt turns out, this had plenty of disadvantages! From needing to pause Dropbox sync when installing new packages to avoid a LOCK error, to file conflicts between the two machines leading to duplicates that are poorly labelled, Dropbox created way more problems than it solved. To add to the headache, my code was all under version control with Git, but not necessarily all up on GitHub (I didn't need it because of Dropbox, right?). I soon discovered that what I thought was a clever hack really didn't have the main advantage I was looking for.\n\n### **The rollercoaster of trusting in a poor system**\n\nI booted up the new laptop, pointed R to the Dropbox library and experienced that fun thing when you open up RStudio and crashes: it had no idea what to do because it couldn't find the packages it needs in order to launch. Hmm, but they were all there… Or were they?\n\nIt soon transpired that most of the files were of size 0KB, which isn't a good sign. Something bad had happened during the Dropbox sync, possibly due to having initially popped the Dropbox folder straight under the C drive — where, fun fact, you don't really have all the permissions you think you have on your own personal laptop — and then moving it. Not to worry, I could uninstall Dropbox and reinstall it again and all would be well… But it was going to take over 24 hours to sync all the files, and I was getting more and more anxious in the meantime about all the files that looked like they had been corrupted in the process – had they? What state would they be in on the Desktop if I fired that up? Major Eek! So much for that quick fix in case of catastrophic failure!\n\n### **The wiser path**\n\nHaving established this was not the way to go, I took steps to remedy the situation and make my R setup more orthodox. Enter {installr}, a package designed [“to make updating R (on windows) as easy as running a function”](https://github.com/talgalili/installr).\n\n**Step 1: Move the library to a standard location**\n\nTurns out, if you do things in a more standard way, there are good solutions to help you keep up with best practice in a standard way!\n\nThe first step was to relocate the library so that I could start using packages and functions which were designed precisely for this type of task. I knew I was about to upgrade my version of R, so I would need to reinstall the packages as part of that. So, long story short, I knew I was OK with updating packages rather than sticking to the versions I'd used to build projects. My #Dataviz work doesn't need to be regenerated, and the stuff I'm doing for clients has been tested in different package environments, so I knew that was safe too.\n\nFollowing the instructions on [this Stackoverflow thread](https://stackoverflow.com/questions/7133394/migrating-r-libraries), I typed:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nto_install <- unname(installed.packages(lib.loc = .libPaths())[, \"Package\"])\n\ninstall.packages(pkgs = to_install, lib=\"C:/Program Files/R/R-4.0.3/library\")\n```\n:::\n\n\nThose two simple lines installed all my existing packages in a more standard location, dependencies and all! It was much quicker than I thought it would be! We're talking minutes. Definitely a **lot** faster than waiting for Dropbox to work its magic! No looking back there! Just count the exclamation marks to get a measure of my surprise.\n\n**Step 2: Update R!**\n\nTo do this, I used {installr} and ran `updateR()` with the defaults:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"installr\")\ninstallr::updateR()\n```\n:::\n\n\nAt this point, I got a warning that it was best to do this in the R Gui rather than in RStudio. Fair enough, close RStudio, open R Gui and run that command again.\n\nIt then informed me that I had over 450 packages to copy / update. Yikes! But again that was remarkably quick! The process didn't copy over my `.RProfile` code chunks which tweak a few things on launching RStudio, but that's easy enough to copy across manually.\n\nI checked the `.libPaths` were back to normal, and they were. This will make future updates way more straightforward! Then I checked for any packages that needed to be updated; unsurprisingly, there were none. This had really worked as well as it says on the tin!\n\nWell, nearly.\n\n**Step 3: Sort out the graphics devices**\n\nI tested out my new setup on a few known projects, where I knew that I could test the output against what I expected, and encountered the following error message:\n\n```         \n# Error in f(...) : Graphics API version mismatch\n```\n\nThat looks fun!\n\nI narrowed it down to the first `ggsave()` call of the project. I confirmed that it was simply the `ggsave()` command that was failing and nothing to do with the specific plot by creating a basic plot and trying to save it. A bit of Googling later, I found the solution [on the Posit Community Forum](https://community.rstudio.com/t/graphics-error-since-intalling-r-4-1-0/105275): `updateR` isn't perfect when it comes to packages that provide graphics devices.\n\nReinstalling {ragg} did the trick:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ragg\")\n```\n:::\n\n\nMy aim at the time of writing the original post was to not lose time reinstalling individual packages while deadlines were looming. But there's a **lot** of wisdom in starting with a clean slate every now and then.\nThanks too for pointing out to me the wisdom of the clean slate!. It's highly unlikely that I'm still using all 450+ of those packages. Some I will have installed to try something and decided not to use, others I will have used in past projects but won't use again. If I were to do this forever, I'd end up with 1000s of packages, most of which would be taking up space that they shouldn't be taking up.\n\nSome recommend starting afresh with every major R upgrade (for example moving from 3.x to 4.x); others prefer a package purge with every R update. There are no hard rules when it comes to this — just make sure you give yourself an opportunity to revisit which packages you actually need every now and then!\n\n**Footnotes**\n\n1.  Thanks to [Chris Beeley](https://twitter.com/ChrisBeeley) for pointing out to me the wisdom of the clean slate!\n\n**Citation**\n\nFor attribution, please cite this work as\n\nThompson (2022, Jan. 11). Building stories with data: New year, new laptop, new library location, new version of R!. Retrieved from https://www.cararthompson.com/posts/2022-01-11-new-year-new-laptop-new-library-location-new-version-of-r/\n\nThis blog has been edited for [NHS-R Style](https://nhsrway.nhsrcommunity.com/style-guides.html#referencing-r-packages-and-functions-in-text), formatted to remove [Latin Abbreviations](https://nhsrway.nhsrcommunity.com/style-guides.html#avoid-latin-abbreviation).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}