{
  "hash": "16c40035d325963d508669837de9f6fc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"The :: operator\"\ndate: \"21 May 2018\"\ndate-modified: '21 February 2024'\ncategories:\n  - R tips\nauthor: Emma Vestesson\nsubtitle: >\n  \"Sometimes two packages will have a function with the same name but they will do different things.\"\nexecute: \n  eval: false\n---\n\n## Namespace issues\n\nMost of the functionality in R comes from additional packages that you load. Sometimes two packages will have a function with the same name but they will do different things. In a situation where you have multiple packages with functions with the same name loaded, R will use the the function from the package you loaded the latest. As you can imagine, this can sometimes create problems. If you are lucky, you get an error message but if you are unlucky your code runs but with an unexpected result.\n\nLet me give you an example. I always load the {dplyr} package. Look what happens when I use summarize to calculate the mean sepal length by species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n#> Warning: package 'dplyr' was built under R version 4.3.2\n#>\n#> Attaching package: 'dplyr'\n#> The following objects are masked from 'package:stats':\n#>\n#>     filter, lag\n#> The following objects are masked from 'package:base':\n#>\n#>     intersect, setdiff, setequal, union\n\niris %>%\n  group_by(Species) %>%\n  summarize(sepal_length_mean = mean(Sepal.Length))\n#> # A tibble: 3 Ã— 2\n#>   Species    sepal_length_mean\n#>   <fct>                  <dbl>\n#> 1 setosa                  5.01\n#> 2 versicolor              5.94\n#> 3 virginica               6.59\n```\n:::\n\n<sup>Created on 2024-02-21 with [reprex v2.1.0](https://reprex.tidyverse.org)</sup>\n\nSay that I then realise that I need the {Hmisc} package and load it. Look what happens when I rerun the same code as above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(Hmisc)\n#> Warning: package 'Hmisc' was built under R version 4.3.2\n#>\n#> Attaching package: 'Hmisc'\n#> The following objects are masked from 'package:base':\n#>\n#>     format.pval, units\n\niris %>%\n  group_by(Species) %>%\n  summarize(sepal_length_mean = mean(Sepal.Length))\n#> Error in iris %>% group_by(Species) %>% summarize(sepal_length_mean = mean(Sepal.Length)): could not find function \"%>%\"\n```\n:::\n\n\n<sup>Created on 2024-02-21 with [reprex v2.1.0](https://reprex.tidyverse.org)</sup>\n\nR is now using the summarize function from the {Hmisc} package and I get an error because the syntax is wrong. The best way to solve this problem is to use the `::` operator. Writing `packagename::functionName` tells R which package to get the function from.\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris3 <- iris %>%\n  group_by(Species) %>%\n  dplyr::summarize(sepal_length_mean = mean(Sepal.Length))\n#> Error in iris %>% group_by(Species) %>% dplyr::summarize(sepal_length_mean = mean(Sepal.Length)): could not find function \"%>%\"\n```\n:::\n\n\n<sup>Created on 2024-02-21 with [reprex v2.1.0](https://reprex.tidyverse.org)</sup>\n\nThis blog has been formatted to follow [NHS-R Style](https://nhsrway.nhsrcommunity.com/style-guides.html#referencing-r-packages-and-functions-in-text)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}