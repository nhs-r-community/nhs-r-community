{
  "hash": "e49a8d0572f53fb7a5e91e982ac454e4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"NHS Number Validation\"\ndate: \"20 November 2019\"\ndate-modified: \"11 July 2024\"\ncategories:\n  - NHS\n  - Packages\nexecute:\n  eval: false\nauthor: Zoë Turner\nsubtitle: >\n  \"NHS Numbers – the backbone of the NHS\"\n---\n\nNHS Numbers are the best. They are numbers that follow you through life, from birth to death, changing only with certain situations and are easy to check for validity from just the numbers themselves.\n\nWhat? You can check to see if a number is a genuine NHS Number without any other information?!\n\nNow, I've worked in the NHS for more years than I care to count and I never realised there was an algorithm to these numbers. I stumbled across this fact through Twitter of all places. Yes, Twitter, the place you'll find NHS-R enthusiasts tweeting things like this:\n\nhttps://twitter.com/sellorm/status/1171858506057682944 which I saw retweeted by @HighlandR (John MacKintosh). - Link no longer works\n\nI've only just started doing things on GitHub but @Sellorm wasn't very close in saying there may be millions of packages as there are, in fact there are only 2 for R, but surprisingly, not a single one in SQL.\n\nI installed the package, had a quick play around and looked at the code on GitHub. The downside for this package, for me, was that you need to feed in your data using vectors and I like using data tables. Plus, I didn't necessarily want a list of outputs like `TRUE`, `TRUE`, `FALSE`, `TRUE` but I wanted to see the NHS numbers that aren't valid. Still, I wouldn't have got so far, so quickly, without @Sellorm's code, excellent notes and thoroughly written Readme file and so the moral of the story is, even if the package doesn't work for a task or problem, you may still be able to use parts of the code.\n\nThe Readme on <https://github.com/sellorm/nhsnumber>, which you can see when you scroll down past all of the file directory looking things, included a link to the wiki page on NHS Numbers and its algorithm check <https://en.Wikipedia.org/wiki/NHS_number>. Again, I had no idea this existed!\n\nWiki, like R, is open sourced and one of the links was out of date. I'd found a really useful document on NHS Numbers a while back <https://www.closer.ac.uk/wp-content/uploads/CLOSER-NHS-ID-Resource-Report-Apr2018.pdf>, so, in the spirit of open source, I updated the Wiki page. Proud moment!\n\nThe algorithm is quite simple and another package on GitHub <https://github.com/samellisq/nhsnumbergenerator> generates numbers using it but I didn't spend too long on these packages as I decided to do my own script, nothing fancy, no loops, functions or packages...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nValidity <- df %>%\n  mutate(\n    length = nchar(NHSNumber),\n    A = as.numeric(substring(NHSNumber, 1, 1)) * 10,\n    B = as.numeric(substring(NHSNumber, 2, 2)) * 9,\n    C = as.numeric(substring(NHSNumber, 3, 3)) * 8,\n    D = as.numeric(substring(NHSNumber, 4, 4)) * 7,\n    E = as.numeric(substring(NHSNumber, 5, 5)) * 6,\n    G = as.numeric(substring(NHSNumber, 6, 6)) * 5,\n    H = as.numeric(substring(NHSNumber, 7, 7)) * 4,\n    I = as.numeric(substring(NHSNumber, 8, 8)) * 3,\n    J = as.numeric(substring(NHSNumber, 9, 9)) * 2,\n    End = as.numeric(substring(NHSNumber, 10, 10)),\n    Total = A + B + C + D + E + G + H + I + J,\n    Remainder = Total %% 11,\n    Digit = 11 - Remainder,\n    Summary = case_when(\n      Digit == 10 ~ 999,\n      Digit == 11 ~ 0,\n      TRUE ~ Digit\n    ),\n    Valid = case_when(\n      Summary == End & length == 10 ~ TRUE,\n      TRUE ~ FALSE\n    )\n  ) %>%\n  filter(Valid == FALSE)\n```\n:::\n\n\n# Importing data\n\nData is imported into R via Excel or, in my case, I used a SQL connection which worked better as a couple of our systems hold many hundreds of thousands of NHS Numbers and I wanted to check them all. Excel might have got a bit of indigestion from that. Also, it meant I wasn't storing NHS Numbers anywhere to then run through R. My systems are secure but it's always worrying having such large amounts of sensitive data in one place and outside of an even securer system like a clinical database.\n\nData doesn't always import into R the same way and for mine I needed to remove NULLs and make the NHSNumber column, which was a factor, into a character and then numeric format:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data %>%\n  filter(!is.na(NHSNumber)) %>%\n  mutate(NHSNumber = as.numeric(as.character(NHSNumber)))\n```\n:::\n\n\n# Factors\n\nFactors are a new thing for me as but, as I understand it, they put data into groups but in the background. For example, if you had male, female and other these would be 3 factors and if you join that to another data set which doesn't happen to have \"other\" as a category the factor would still linger around in the data, appearing in a count as 0 as the table still has the factor information but no data in that group.\n\nTo manipulate factor data I've seen others change the format to character and so that's what I did. I've done similar things in SQL with integers and dates; sometimes you have to change the data to an 'intermediate' format.\n\n# Validity code – explanation\n\nThis code uses dplyr from tidyverse to add columns:\n\n```\nValidity <- df %>% \n  mutate(length = nchar(NHSNumber)),\n```\n\nAn NHS number must be 10 characters and `nchar()` reminds me of `LEN()` in SQL which is what I would use to check the length of data.\n\nOne thing I didn't code, but I guess people may want to check, is that all characters are numeric and no letters have been introduced erroneously. That's something to consider.\n\n```\n     A = as.numeric(substring(NHSNumber,1,1)) *10,\n     B = as.numeric(substring(NHSNumber,2,2)) *9,\n     C = as.numeric(substring(NHSNumber,3,3)) *8,\n     D = as.numeric(substring(NHSNumber,4,4)) *7,\n     E = as.numeric(substring(NHSNumber,5,5)) *6,\n```\n\nI didn't use F as it's short for FALSE which changed the meaning and colour of the letter. It can be used as a column name but I missed it out for aesthetics of the script!\n\n```\n     G = as.numeric(substring(NHSNumber,6,6)) *5,\n     H = as.numeric(substring(NHSNumber,7,7)) *4,\n     I = as.numeric(substring(NHSNumber,8,8)) *3,\n     J = as.numeric(substring(NHSNumber,9,9)) *2,\n```\n\nThere is possibly a much smarter way of writing this, perhaps a loop. Samuel Ellis' package nhsnumbergenerator creates a table using sequences:\n\n```\ncheckdigit_weights = data.frame(digit.position=seq(from=1, to = 9, by =1),\n                                weight=seq(from=10, to = 2, by =-1)\n)\n```\n*note he uses = rather than <-*\n\nI like this code. It's very concise, but it just was easier writing out the multiplications for each part of the NHS Number; the first number is multiplied by 10, the second by 9, the third by 8 and so on.\n\n```\n    End = as.numeric(substring(NHSNumber,10,10)),\n```\n put this in as the final number in the sequence is the check for the later Digit (also called checksum).\n\n```\n     Total = A+B+C+D+E+G+H+I+J,\n```\n\nJust adding all the multiplied columns together.\n\n```\n     Remainder = Total %% 11,\n```\n\nThis gives the remainder from a division by 11.\n\n```\n     Digit = 11- Remainder,\n```\n\n11 take away the remainder/checksum.\n\n```\n     Summary = case_when(Digit == 10 ~ 999,\n                         Digit == 11 ~ 0,\n                         TRUE ~ Digit),\n```\n\nLots of people use `if(else())` in R but I like `case_when()` because it's like SQL. The lines run in logical order:\n\n- when the digit = 10 then it's invalid so I put in 999 as that's so high (in the hundreds) it shouldn't match the Digit/Checksum (which is a unit),\n- if it's 11 then change that to 0 following the methodology,\n- else just use the digit number.\n\nActually, thinking about it I probably don't need the 10 becomes 999 as 10 could never match a single unit number. Perhaps that's redundant code.\n\n```\n     Valid = case_when(Summary == End & length == 10 ~ TRUE,\n                       TRUE ~ FALSE\n                       )) %>% \n```\n\n`case_when()` again but this time to get the TRUE/FALSE validity. If the number generated is the same as the last digit of the NHS Number AND the length of the NHS Number is 10 then TRUE, else FALSE.\n\nI liked this like of code as it was a bit strange saying TRUE then FALSE but it's logical!\n\n```\n  filter(Valid == FALSE)\n```\n\nJust bring back what isn't valid.\n\n# Did it work?\n\nI think it did. If I got anything wrong I'd love to get feedback but I ran through many hundreds of thousands of NHS Numbers through it and found…..\n\nNo invalid numbers\n\nI possibly should have checked beforehand but I suspect our clinical systems don't allow any incorrect NHS Numbers to be entered in at source. Still, it was fun and could be applied to manually entered data from data kept in spreadsheets for example.\n\n# An interesting blog\n\nAs here were no SQL code scripts on GitHub for NHS Number validations I did a quick search on the internet and found this: <https://healthanalyst.wordpress.com/2011/08/21/nhs-number-validation/> which is a blog by @HealthAnalystUK from 2011. The reason I'm referring to it in this blog is because HealthAnalystUK not only shared SQL code that looked very similar to the code here but also R and uses it as a function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNHSvalidation <- function(NHSnumber) {\n  NHSlength <- length(NHSnumber)\n\n  A <- as.numeric(substr(NHSnumber, 1, 1))\n  B <- as.numeric(substr(NHSnumber, 2, 2))\n  C <- as.numeric(substr(NHSnumber, 3, 3))\n  D <- as.numeric(substr(NHSnumber, 4, 4))\n  E <- as.numeric(substr(NHSnumber, 5, 5))\n  F <- as.numeric(substr(NHSnumber, 6, 6))\n  G <- as.numeric(substr(NHSnumber, 7, 7))\n  H <- as.numeric(substr(NHSnumber, 8, 8))\n  I <- as.numeric(substr(NHSnumber, 9, 9))\n  J <- as.numeric(substr(NHSnumber, 10, 10))\n\n  if ((A == B) & (B == C) & (C == D) & (D == E) & (E == F) & (F == G) & (G == H) & (H == I) & (I == J)) {\n    UniformNumberCheck <- 1\n  } else {\n    UniformNumberCheck <- 0\n  }\n\n  Modulus <- ((A * 10) + (B * 9) + (C * 8) + (D * 7) + (E * 6) + (F * 5) + (G * 4) + (H * 3) + (I * 2))\n  Modulus <- (11 - (Modulus %% 11))\n\n  if (\n\n    ((Modulus == J) & (UniformNumberCheck != 1) & (NHSlength == 10)) | ((Modulus == 11) & (J == 0) & (UniformNumberCheck != 1) & (NHSlength == 10))) {\n    ReturnValue <- 1\n  } else {\n    ReturnValue <- 0\n  }\n\n  return(ReturnValue)\n}\n```\n:::\n\n\nI hadn't coded the check for repeating numbers:\n\n```\nif ((A==B)&(B==C)&(C==D)&(D==E)&(E==F)&(F==G)&(G==H)&(H==I)&(I==J))\n```\n\nand I couldn't find any reference to this in the Wiki page or the document from the University of Bristol so I'm unsure if this is a part of the methodology. If it is, then I've seen at least 1 NHS Number that would fail this test.\n\n# A conclusion\n\nIf anyone has created a package or script for NHS number checks and wants to share please feel free to write a blog. NHS-R Community also has a GitHub repository at <https://github.com/nhs-r-community> where code like this blog can go (I wrote this in RMarkdown).\n\nBlogs can be emailed to [nhs.rcommunity@nhs.net](mailto:nhs.rcommunity@nhs.net) and get checked by a group of enthusiast volunteers for publishing.\n\nThis blog was written Zoë Turner, Senior Information Analyst at Nottinghamshire Healthcare NHS Trust.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}