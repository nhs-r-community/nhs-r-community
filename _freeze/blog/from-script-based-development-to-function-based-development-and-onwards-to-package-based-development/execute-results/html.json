{
  "hash": "b8debd5ea0304efe4f7ecdf49000bf1a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"From script-based development to function-based development and onwards to Package Based development\"\ndate: \"15 October 2018\"\ndate-modified: \"23 March 2024\"\ncategories:\n  - Functions\nauthor: Andrew Hill\nsubtitle: >\n  \"How to build a function.\"\n---\n\nAt the NHS R Conference, I suggested to people that they should embrace the idea of package-based development rather than script-based work.\n\nI'm going to talk you through that process, using the simplest of scripts – ‘Hello World'. I'm going to assume that you're using the freely available RStudio Desktop Edition as the editor for this: other versions of RStudio are likely to be essentially identical. Non R-Studio users may need to revert to more basic principles.\n\nFirst let's write ‘Hello World' – the simplest R script in the world. Open a new R script file and get your script underway:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(\"Hello World from the NHS-R Community!\")\n```\n:::\n\n\nSave it (for posterity).\n\nIn the conference, we discussed that generally writing functions is more helpful than writing scripts as it gives you greater re-usability. This example is a very trivial one (in fact so trivial as to be nearly redundant).\n\nSo we consider our script carefully and determine – what does it DO? Clearly it's a way of greeting a person. What if we wanted to greet the person in a different way? What if we wanted to greet a different person?\n\nSo we have defined it's purpose, and the parameters that are likely to be useful to others.\n\nLet's re-write our script to be more usable.\n\nWe define a function using the function function. You can see a much more detailed tutorial of how to do this here: [http://stat545.com/block011_write-your-own-function-01.html](http://stat545.com/block011_write-your-own-function-01.html).\n\nA function is defined by assigning the result of the function() function to a variable which is the function name. The parameters of `function()` are our new parameter names in our function.\n\nIt is really important to name your function clearly so people know what it does. Generally use active verbs to describe intent, and a consistent naming scheme. Also choose appropriate and clear names for the parameters. So let's call our new function greet_person, and we will call our parameters greeting and recipient.\n\nOur new code will look like this. Stick this into a new R script for now and run it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngreet_person <- function(greeting, sender) {\n  message(greeting, \" from \", sender)\n}\n```\n:::\n\n\nOnce you've run your script you can now call your function from the console:\n\ngreet_person(“Hello World”, “the NHS-R Community!”) And of course if you want to use a different greeting we can now change our parameter value:\n\ngreet_person(“Welcome”, “the NHS-R Community!”) So far so good.\n\nBut – we've had to repeat our sender parameter. What if we know we're usually going to use that first Hello World greeting; but we just want the option of doing something different if the situation arises?\n\nWe can get around that by supplying default values. In the function() function we can set a value to both greeting and sender using =. Let's set default values for greet_person:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngreet_person <- function(greeting = \"Hello World\", sender = \"the NHS-R Community!\") {\n  message(greeting, \" from \", sender)\n}\n```\n:::\n\n\nNow if you want our ‘default' message you can just call:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngreet_person()\n```\n:::\n\n\nBut you can customise either parameter without having to specify anything you don't want to change:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngreet_person(sender = \"Drew Hill\")\n```\n:::\n\n\nInstead of “Drew Hill” from our previous example, you'll see the sender is “1”.\n\nWhat if you accidentally sent a vector of names? R will turn those into a concatenated string of names without spaces:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngreet_person(sender = c(\"Bob\", \"Jim\"))\n```\n:::\n\n\nSome things however certainly could break this process – so it is really important to check that you can handle the inputs you receive within a function before trying to use them.\n\nThe first thing we need to do is to make sure we are dealing with something that can be turned into a character. We can check that by using the is.character function – which returns TRUE if a given value is TRUE, and FALSE if it is not something that can be turned into a character.\n\nIf is.character is false, we want to stop with an error:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngreet_person <- function(greeting = \"Hello World\", sender = \"the NHS-R Community!\") {\n  if (!is.character(greeting)) {\n    stop(\"greeting must be a string\")\n  }\n\n  if (!is.character(sender)) {\n    stop(\"sender must be a string\")\n  }\n\n\n  message(greeting, \" from \", sender)\n}\n```\n:::\n\n\nWe can test how this works by using NULL as a parameter: in real life this happens quite a lot as you try to pass a variable to your new function but forget to set the variable earlier on!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngreet_person(sender = NULL)\n```\n:::\n\n\n```\nError in greet_person(sender = NULL) : sender must be a string\n```\n\nWe also know that our function actually isn't very good at handling vectors of strings (that is where there is more than one name): it will simply shove them all together without spaces. However it works and is perfectly functional. So we have a design decision: do we want to allow that, or not? A third way might be to allow it but to use a warning – perhaps a little over the top in our example, but for complex examples that may make more sense. Whereas stop will halt the code and force you to fix your bugs, the `warning()` function lets the code continue but tells you to go back and do it better later. Let's add a warning if there was more than one sender:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngreet_person <- function(greeting = \"Hello World\", sender = \"the NHS-R Community!\") {\n  if (!is.character(greeting)) {\n    stop(\"greeting must be a string\")\n  }\n\n  if (!is.character(sender)) {\n    stop(\"sender must be a string\")\n  }\n\n\n  if (length(sender) > 1) {\n    warning(\"greet_person isn't very good at handling more than one sender. It is better to use just one sender at a time.\")\n  }\n\n  message(greeting, \" from \", sender)\n}\n```\n:::\n\n\nIf we now called the function with two senders we'd be able to do so but would get politely told that it's not a good idea:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngreet_person(sender = c(\"Jim\", \"Bob\"))\n```\n:::\n\n\nSo – hopefully from this you've moved from having a script which would only do precisely what you wanted in a single set of circumstances, to now having a natty little function which will say greet whoever you want, with the type of greeting that you want.\n\nAs an exercise to complete: imagine you work in the NHS-R community welcoming team. You are tasked with sending greetings from the team on a regular basis.\n\nYou used to use a script to do this and had to remember to get the style right every time – but now you sit at your console , run your script containing your function, and `greet_person()` on demand.\n\nYour boss has come to you and urgently wants you to change your way of working. Rather than sending a greeting from the team using just a single team name, he wants you to send the individual names in the greeting from both Jim and Bob.\n\nHave a think about how you could change the function so that we can cope with multiple senders.\n\nThe greetings will continue as we then think about scaling up the NHS R Community Greetings division in our next instalment.\n\nThis blog was written by:\n\nDr. Andrew Hill\n\nClinical Lead for Stroke, St Helens and Knowsley Teaching Hospitals\n\nThis blog has been edited for [NHS-R Style](https://nhsrway.nhsrcommunity.com/style-guides.html#referencing-r-packages-and-functions-in-text) and to ensure running of code in Quarto.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}