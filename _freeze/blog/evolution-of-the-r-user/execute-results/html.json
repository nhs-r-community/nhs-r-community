{
  "hash": "7da079362d8d3c610fee1935096a52ff",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Evolution of the R user\"\ndate: \"13 July 2018\"\ndate-modified: '22 March 2024'\ncategories:\n  - Reflections\nauthor: Seb Fox, Julian Flowers and Georgina Anderson, Public Health England.\nsubtitle: >\n  \"The stages of learning R (with excitement factor ratings)\"\nimage: img/Evolution-of-R-blog-image.png\nimage-alt: \"5 R logos with the capital R and circle behind going from small to large in size.\"\n---\n\nImage adapted from source: <https://www.r-project.org/logo/>\n\n# The beginning\n\nMy journey with R began when a colleague of mine said to me that there was software out there, called R, where you could plot all the fields in a matrix of data against each other with one function to visualise any relationships within the dataset. I remember thinking how powerful that could be but never had a chance to investigate it as we weren't allowed to install R on our work machines.\n\nFour years and two jobs later, I was in a conversation with my new colleagues about how interesting it would be to see which variables in a dataset correlate with one another. I remembered R and my previous conversation, and embarked on a journey to find that function. This journey has resulted in transforming my view of data analytics.\n\nIn this blog post I try to describe what I've witnessed as a fairly typical journey through the R and RStudio toolkit, especially for users who come from a background of using Excel as their main analytical tool. I hope that if you are on the journey this blog can help with future steps.\n\n# Using the console\n\nExcitement factor: 0 (out of 5)\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaste(intToUtf8(acos(log(1))*180/pi-17),\n      intToUtf8(atan(1/sqrt(3))*180/pi+2), toupper(substr(month.name[4],5,5)),\n  intToUtf8(acos(exp(0)/2)*180/pi+2^4+3),toupper(substr(month.name[11],3,3)),\n      LETTERS[3^2-2^2],intToUtf8(atan(1/sqrt(3))*180/pi+2),\n      intToUtf8(acos(log(1))*180/pi-1), substr(month.name[10],1,1),\n      intToUtf8(acos(log(1))*180/pi-5), sep = intToUtf8(0))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"I LOVE YOU\"\n```\n\n\n:::\n:::\n\n\nSource: <https://www.listendata.com/2016/02/propose-your-crush-with-r.html>\n\nUsers generally start by typing something like `4 + 2` into the console. After some lengthy testing of combining objects, creating vectors and dataframes they decide they have done enough and close RStudio.\n\n`Save workspace image to ~/.RData?`\n\nWhat does that mean? It dawns on the user that R has some major concepts that they will need to get their head around before feeling comfortable with it.\n\n# Writing scripts\n\nExcitement factor: 1\n\nHaving got comfortable with a few functions users want to remember how to use certain functions. If users have an understanding of Excel macros it is still hard to see what R can offer over Excel.\n\n# ggplot2\n\nExcitement factor: 5 (eventually after weeks of frustration)\n\n![Map of flights](img/global-map-visual.png){fig-alt=\"Global map with outline of countries with countries defined by the flight paths being lighter than the background\"}\n\nSource: <https://vanishingcodes.wordpress.com/2015/06/24/use-r-to-plot-flight-routes-on-a-fancy-world-background/>\n\nHaving done some analysis users learn about the potential of ggplot2 for visualisations. In reality, ggplot2 is a whole journey in itself‚Ä¶theming charts, playing with legends, changing the order of categories (ggplot2 could be a blog in itself). What the package can do though is produce extremely powerful and appealing [visualisations](https://r-graph-gallery.com/).\n\n# RMarkdown documents\n\n![Screenshots of Public Health England spine chart report and PHE Outcomes Framework](img/rmd-docs.png)\n\nSoon, users discover they can intersperse scripts and commentary in RMarkdown documents, which makes it very easy to share outputs with other people (including non-R users). This tiny additional skill has huge benefits.\n\nIt is also very exciting that the same code can produce a Word document, an html document and a pdf document (after a little fiddling with extra installations, which should be made easier following the introduction of tinytex). Recently, the same code can even be used to produce PowerPoint presentations.\n\nHere are a couple of useful links:\n\n- Beginners [tutorial](https://rmarkdown.rstudio.com/lesson-1.html)\n- The recently published [‚Äòdefinitive guide'](https://bookdown.org/yihui/rmarkdown/)\n\n## Projects\n\nExcitement factor: 2 (they aren't exciting but they are sooooo useful)\n\n![Screenshot of RStudio Project wizard](img/projects-wizard.png)\n\nUseful link: [https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects)\n\nIt is difficult to share RMarkdown documents so other people can ‚Äúknit‚Äù them. There are issues around working directories and imported files that are saved in a location other people can't access. Here are some normal conversation starters for people in this situation:\n\n‚ÄúSave these files in the same folder as the markdown document‚Ä¶‚Äù\n\nOr\n\n‚ÄúSet your working directory to here and save this file here‚Ä¶‚Äù\n\nUsers may have heard of projects at this point but never reaped their benefits. Projects solve many of these problems.\n\nThere are the added benefits of being able to work on multiple projects at the same time and being able to pick up a project where a user has left off.\n\n# Shiny\n\nExcitement factor: 5\n\n![Screenshot of a Shiny app showing epidemiological maps of France](img/shiny-screenshot.png)\n\nSource: [https://cpelat.shinyapps.io/mass/](https://cpelat.shinyapps.io/mass/)\n\nUsers generally are quite confident at this point. They can make stories out of data and share them with others. The natural next step is to try and make the stories interactive using Shiny. Shiny seems like it should be similar to RMarkdown, but it isn't and it is hard. Some users persist and some go back to their comfort zone.\n\n# Functional programming\n\nExcitement factor: 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuseful_function <- function(n) {\n        return(paste(\"Functions are\",\n                     paste(rep(\"really\", n), collapse = \" \"),\n                     \"useful\"))\n}\n\nuseful_function(9)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Functions are really really really really really really really really really useful\"\n```\n\n\n:::\n:::\n\n\nCoding is sometimes compared to an art, where the objective is to write some ‚Äòbeautiful' code in the shortest, most understandable and robust form possible. This is where functional programming helps. Users find themselves repeating lines of code multiple times throughout analyses or projects. Writing functions helps to save time, ‚Äúprettify‚Äù code and reduce its length.\n\n# Packages\n\nExcitement factor: 4\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cowsay)\nsay(\"Good things come in small packages\",\n    by = \"chicken\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n ____________________________________ \n< Good things come in small packages >\n ------------------------------------ \n      \\\n       \\\n         _\n       _/ }\n      `>' \\\n      `|   \\\n       |   /'-.     .-.\n        \\'     ';`--' .'\n         \\'.    `'-./\n          '.`-..-;`\n            `;-..'\n            _| _|\n            /` /` [nosig]\n```\n\n\n:::\n:::\n\n\nWhen many functions revolve around a vaguely similar topic they can be grouped into a package. What's more, other people are also probably doing, or would like to do, very similar tasks. Users can put their related functions together into a package and make that package available for others.\n\nA few pointers and plugs here:\n\n- It is easy to write a package, especially using this guide written by Hadley Wickham.  \n- One of the goals of my first package was to contribute to open science. rOpenSci provides a great repository of packages that performs this function.\n\n# Fork in the road\n\nThis is generally the point where R experiences diverge from each other. The different paths may be:\n\n- Analysis ‚Äì using the skills developed to perform analysis  \n- Analytical blogs ‚Äì publishing analysis and stories. RPubs offers all R users the ability to publish their markdown documents publicly  \n- Mastering code management ‚Äì using software like Git, users can share code to be transparent and reproducible. This method also facilitates collaboration well  \n- Writing more packages ‚Äì as an organisation, packages perform a great function to standardise processes and make people have easier R experiences  \n- Contributing to other people's packages ‚Äì all R packages are developed in the open. Generally, anyone has the ability to take someone's code, change it, and offer the change up to the original developer to include into future version of the code  \n- Writing books ‚Äì using RMarkdown alongside bookdown  \n- Learn Python and start again üòâ\n\n# PS\n\nThe function I was looking for that started my R journey was `pairs()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(iris)\n```\n\n::: {.cell-output-display}\n![](evolution-of-the-r-user_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n",
    "supporting": [
      "evolution-of-the-r-user_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}