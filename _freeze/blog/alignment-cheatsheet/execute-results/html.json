{
  "hash": "cee321b8ca0bafcecad2bb3126f0eecc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Alignment cheatsheet\"\ndate: \"11 May 2022\"\ndate-modified: \"27 July 2024\"\ncategories:\n  - ggplot2\n  - tidyverse\n  - Visualisations\nauthor: Cara Thompson\nexecute: \n  eval: false\nsubtitle: >\n---\n\nI've used `{ggtext}`'s `geom_textbox()` a lot in my recent data visualisations, but, every time, I end up resorting to a bit of trial and error to get the alignment just right. Time to create a cheatsheet that will be useful to my future self, and hopefully to a few others also.\n\n## **First, why `geom_textbox()`?**\n\nI like it for its versatility. It allows for fun things with markdown and a limited number of html tags, which makes it easy to format the text on the fly. I'll demo a few tricks in the code below but cover them in more detail elsewhere. It also allows for easy placement and manipulation of the box itself, tweaking the radius of the corners, the colour, how thick the border is, and many more things.\n\nWhat are the alignment parameters?\n\n-   `vjust`\n\n-   `valign`\n\n-   `hjust`\n\n-   `halign`\n\nThese can be set per textbox using values within aes() to allow for different alignments for different textboxes, or across the board outside of aes() so that the same alignment settings are applied to all the textboxes. In this demo, I'll set different values for each box.\n\n## **OK, let's go!**\n\nFirst, we need to load the necessary libraries:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggtext)\nlibrary(extrafont)\n```\n:::\n\n\nNext, let's put a tibble together to provide data for our textboxes.\n\n```         \nalignments <- tibble(\"h_align\" = sort(rep(c(0, 0.5, 1), 3)),\n                     \"h_just\" = rep(c(0, 0.5, 1), 3), \n                     \"v_align\" = rep(c(0, 0.5, 1), 3),\n                     \"v_just\" = sort(rep(c(0, 0.5, 1), 3))) %>%\n  mutate(\"content\" = \n           paste0(\"<span style=\"font-size:36px\">↕️</span> **vjust = \", v_just,\n                  \", valign = \", v_align, \"**<br>\",\n                  \"<span style=\"font-size:36px\">↔️</span> **hjust = \", h_just,\n                  \", halign = \", h_align, \"**<br><br>\",\n                  \"Here's some text in a box, and *this* is how everything aligns!\"))\n```\n\nAnd finally, let's create a plot to see how everything aligns.\n\n```         \nggplot(alignments) +\n  geom_textbox(aes(x = h_just, y = v_just, label = content,\n                   halign = h_align, hjust = h_just,\n                   valign = v_align, vjust = v_just),\n               size = 6.4,\n               colour = \"#232a27\",\n               box.colour = \"#705c70\", \n               fill = \"#f1f4f3\",\n               family = \"Lato\",\n               width = unit(16, \"lines\"),\n               height = unit(15, \"lines\"),\n               lineheight = 1.3,\n               show.legend = F) +\n  geom_point(aes(x = h_just, y = v_just), \n             size = 10, alpha = 0.5, colour = \"#232a27\") +\n  labs(title = \"ngeom_textbox() alignment cheatsheet\",\n       subtitle = \"nThe dots indicate the x/y coordinates of each box\",\n       caption = \"Graphic: @cararthompson | cararthompson.comn\") +\n  xlim(c(-0.1, 1.1)) +\n  ylim(c(-0.1, 1.1)) +\n  theme_void()%+replace%\n  theme(plot.title = element_text(colour = \"#232a27\", \n                                  size = 60, family = \"Abel\"),\n        plot.subtitle = element_text(colour = \"#232a27\", \n                                     size = 40, family = \"Lato\"),\n        plot.caption = element_text(colour = \"#232a27\", size = 20, \n                                    family = \"Abel\", hjust = 0.95))\n```\n\n![Plot demonstrating how each alignment parameter affects the position of the box and the position of the text therein](img/align_cheatsheet.png)\n\n## **So, what does what?**\n\n-   `h`/`vjust` determines the alignment of the box against its coordinates\n\n-   `h`/`valign` determines the alignment of the text within the box\n\n-   for `h`/`valign` 0 to 1 moves the text from bottom to top and from left to right inside the boxes (huh, that's the same direction as 0 to 1 on the axes – that should make it easier to remember!)\n\n-   for `h`/`vjust` 0 to 1 goes… well I'm not too sure!\n\nI think my confusion around how to verbalise the direction lies in what we use as our reference point. Are we aligning the top of the box to the coordinate, or are we aligning the box to the bottom of the coordinate? If we keep our focus on the bottom/middle top of the box, `vjust = 1` means “make the top of this box line up with the y-coordinate” and the 0 to 1 direction stays consistent with the direction of the y axis. Happy days!\n\nBut I think I'll probably still end up referring back to this plot.\n\nOriginally posted: <https://www.cararthompson.com/posts/2021-09-02-alignment-cheat-sheet/alignment-cheat-sheet.html>\n\n## **Citation**\n\nFor attribution, please cite this work as:\n\nThompson, Cara. 2021. “Alignment Cheatsheet.” September 2, 2021. [https://www.cararthompson.com/posts/2021-09-02-alignment-cheat-sheet/alignment-cheat-sheet.html](https://www.cararthompson.com/posts/2021-09-02-alignment-cheat-sheet/alignment-cheat-sheet).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}