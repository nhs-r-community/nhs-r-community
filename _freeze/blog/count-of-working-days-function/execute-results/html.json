{
  "hash": "b10722901a962c0eec6d8229b8379ab4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Count of working days function'\nauthor: Zoë Turner\ndate: \"16 July 2019\"\ndate-modified: '17 February 2024'\ncategories:\n  - Functions\nsubtitle: >\n  Creating a function to work out the number of working days a seasonal bus ticket can be used.\nimage: img/travelcard.jpg\nimage-alt: \"A London rail travel ticket\"\n---\n\n<!-- Image by <a href=\"https://pixabay.com/users/ronporter-291009/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=429277\">Ron Porter</a> from <a href=\"https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=429277\">Pixabay</a> -->\n\n\n\nIt's at this time of year I need to renew my season ticket and I usually get one for the year. Out of interest, I wanted to find out how much the ticket cost per day, taking into account I don't use it on weekends or my paid holidays. I started my workings out initially in Excel but got as far as typing the formula `=WORKDAYS()` before I realised it was going to take some working out and perhaps I should give it a go in R as a function…\n\nChris Beeley had recently shown me functions in R and I was surprised how familiar they were as I've seen them on Stack Overflow (usually skimmed over those) and they are similar to functions in SQL which I've used (not written) where you feed in parameters.\n\nWhen I write code I try to work out how each part works and build it up but writing a function requires running the whole thing and then checking the result, the objects that are created in the function do not materialise so are never available to check. Not having objects building up in the environment console is one of the benefits of using a function, that and not repeating scripts which then ALL need updating if something changes.\n\n## Bus ticket function\n\nThis is the final function which if you run you'll see just creates a function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Week starts on Sunday (1)\nDailyBusFare_function <- function(StartDate, EmployHoliday, Cost, wfh){\n\n  startDate <- dmy(StartDate)\n  endDate <- as.Date(startDate) %m+% months(12)\n\n# Now build a sequence between the dates:\n  myDates <-seq(from = startDate, to = endDate, by = \"days\")\n\n  working_days <- sum(wday(myDates)>1&wday(myDates)<7)-length(holidayLONDON(year = lubridate::year(startDate))) - EmployHoliday - wfh\n\nper_day <- Cost/working_days\n\nprint(per_day)\n}\n```\n:::\n\n\nRunning the function you feed in parameters which don't create their own objects:\n\n\n```{.r .cell-code}\nDailyBusFare_function(\"11/07/2019\",27,612,1)\n```\n\n[1] 2.707965\n\n## Going through each line:\n\nTo make sure each part within the function works it's best to write it in another script or move the bit between the curly brackets `{}`.\n\nFirstly, the `startDate` is self explanatory but within the function I've set the `endDate` to be dependent upon the `startDate` and be automatically 1 year later.\n\nOriginally when I was trying to find the \"year after\" a date I found some documentation about {lubridate}'s function `dyear()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Next couple of lines needed to run the endDate line!\nlibrary(lubridate)\nstartDate <- dmy(\"11/07/2019\")\n\nendDate <- startDate + dyears(1)\n```\n:::\n\n\nbut this gives an exact year after a given date and doesn't take into account leap years. I only remember this because 2020 will be a leap year so the end date I got was a day out!\n\nInstead, Chris Beeley suggested the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nendDate <- as.Date(startDate) %m+% months(12)\n```\n:::\n\n\nNext, the code builds a sequence of days. I got this idea of building up the days from the blogs on getting days between two dates but it has also come in use when plotting over time in things like SPCs when some of the time periods are not in the dataset but would make sense appearing as 0 count.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n\n# To run so that the sequencing works\n# using as.Date() returns incorrect date formats 0011-07-20 so use dmy from\n# lubridate to transform the date\n\n  startDate <- dmy(\"11/07/2019\")\n  endDate <- as.Date(startDate) %m+% months(12)\n\n# Now build a sequence between the dates:\n  myDates <- seq(from = startDate, to = endDate, by = \"days\")\n```\n:::\n\n\nAll of these return values so trying to open them from the Global Environment won't do anything. It is possible view the first parts of the values but also typing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# compactly displays the structure of object, including the format (date in this case)\nstr(myDates)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Date[1:367], format: \"2019-07-11\" \"2019-07-12\" \"2019-07-13\" \"2019-07-14\" \"2019-07-15\" ...\n```\n\n\n:::\n\n```{.r .cell-code}\n# gives a summary of the structure\nsummary(myDates)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Min.      1st Qu.       Median         Mean      3rd Qu.         Max. \n\"2019-07-11\" \"2019-10-10\" \"2020-01-10\" \"2020-01-10\" \"2020-04-10\" \"2020-07-11\" \n```\n\n\n:::\n:::\n\n\nTo find out what a function does type `?str` or` ?summary` in the console. The help file will then appear in the bottom right Help screen.\n\nNext I worked out `working_days.` I got the idea from a blog which said to use length and which:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  working_days <- length(which((wday(myDates)>1&wday(myDates)<7)))\n```\n:::\n\n\nNote that the value appears as `262L` which is a count of a logical vector. Typing `?logical` into the Console gives this in the Help:\n\n_Logical vectors are coerced to integer vectors in contexts where a numerical value is required, with TRUE being mapped to 1L, FALSE to 0L and NA to NA_integer_._\n\nI was familiar with `length()`, it does a count essentially of factors or vectors (type `?length` into the Console for information) but `which()` wasn't something I knew about. Chris Beeley explained what which does with the following example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate a list of random logical values\na <- sample(c(TRUE, FALSE), 10, replace = TRUE)\n\n# Look at list\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# using which against the list gives the number in the list where the logic = TRUE\nwhich(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 4 5 6\n```\n\n\n:::\n\n```{.r .cell-code}\n# counts how many logical arguments in the list (should be 10)\nlength(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\n# counts the number of TRUE logical arguments\nlength(which(a))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\nThen Chris Beeley suggested just using `sum` instead of `length(which())` which counts a logical vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\nIt seems this has been discussed on Stack Overflow before: [https://stackoverflow.com/questions/2190756/how-to-count-true-values-in-a-logical-vector](https://stackoverflow.com/questions/2190756/how-to-count-true-values-in-a-logical-vector)\n\nIt's worthy of note that using sum will also count `NA`s so the example on Stack overflow suggest adding:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(a, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\nThis won't affect the objects created in this blog as there were no `NA`s in them but it's just something that could cause a problem if used in a different context.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  working_days <- sum(wday(myDates)>1&wday(myDates)<7)\n\n# Just to check adding na.rm = TRUE gives the same result\n  working_days <- sum(wday(myDates)>1&wday(myDates)<7, na.rm = TRUE)\n```\n:::\n\n\nI then wanted to take into account bank/public holidays as I wouldn't use the ticket on those days so I used the function `holidayLONDON(` from the package {timeDate}:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(holidayLONDON(year = lubridate::year(startDate)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n:::\n\n\nI used `lubridate::year` because the package {timeDate} uses a parameter called year so the code would read `year = year(startDate)` which is confusing to me let alone the function!\n\nAgain, I counted the vectors using `length()`. This is a crude way of getting bank/public holidays as it is looking at a calendar year and not a period (July to July in this case).\n\nI did look at a package called {bizdays} but whilst that seemed to be good for building a calendar I couldn't work out how to make it work so I just stuck with the {timeDate} package. I think as I get more confident in R it might be something I could look into the actual code for because all packages are open source and available to view through CRAN or GitHub.\n\nBack to the function...\n\nI then added `- EmployHoliday` so I could reduce the days by my paid holidays and `- wfh` to take into account days I've worked from home and therefore not travelled into work.\n\nThe next part of the code takes the entered `Cost` and divides by the `Working_days`, printing the output to the screen:\n\n`per_day <- Cost/working_days`\n\n`print(per_day)`\n\nAnd so the answer to the cost per day is printed in the Console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDailyBusFare_function(\"11/07/2019\",27,612,1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.707965\n```\n\n\n:::\n:::\n\n\n## A conclusion... of sorts\n\nWhilst this isn't really related to the NHS it's been useful to go through the process of producing a function to solve a problem and then to explain it, line by line, for the benefit of others.\n\nI'd recommend doing this to further your knowledge of R at whatever level you are and particularly if you are just learning or consider yourself a novice as sometimes blogs don't always detail the reasons why things were done (or why they were not done because it all went wrong!).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}