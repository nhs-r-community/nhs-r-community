{
  "hash": "56f8d123fc70b789ae7d555e24fb6475",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Diverging Bar Charts – Plotting Variance with ggplot2\"\ndate: \"24 May 2018\"\ndate-modified: '21 February 2024'\ncategories:\n  - R tips\n  - ggplot2\n  - base R\nauthor: Gary Hutson\nsubtitle: >\n  \"The aim here is to create a diverging bar chart that shows variance above and below an average line.\"\n---\n\n# Diverging Bar Charts\n\nThe aim here is to create a diverging bar chart that shows variance above and below an average line. In this example I will use Z Scores to calculate the variance, in terms of standard deviations, as a diverging bar. This example will use the `mtcars` stock dataset, as most of the data I deal with day-to-day is patient sensitive.\n\n# Data preparation\n\nThe code below sets up the plotting libraries, attaches the data and sets a theme:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ntheme_set(theme_classic())\ndata(\"mtcars\") # load data\n```\n:::\n\n\nNext, we will change some of the columns in the data frame and perform some calculations on the data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars$CarBrand <- rownames(mtcars) # Create new column for car brands and names\n```\n:::\n\n\nAs commented, this line uses the existing `mtcars` data frame and uses the dollar sign notation that is add a new column, or refer to a column, to create a column name called CarBrand. Then we assign the car brand (<-) with the rownames from the data frame. This is obviously predicated on there being some row names in the data frame, otherwise you would have to name the rows using `rownames()`.\n\n# Adding a Z Score calculation\n\nA [Z score](https://stattrek.com/statistics/dictionary?definition=z-score) is a calculation which uses the x observation subtracts said observation from the mean and divides by the standard deviation. The link shows the mathematics behind this, for anyone who is interested.\n\nThe following code shows how we would implement this score:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars$mpg_z_score <- round((mtcars$mpg - mean(mtcars$mpg)) / sd(mtcars$mpg), digits = 2)\n```\n:::\n\n\nThe statistics behind the calculation have already been explained, but I have also used the `round()` function to round the results down to 2 digits.\n\n# Creating a cut off (above/below mean)\n\nThe next step is to use conditional algebra (first advocated by one of my heroes George Boole) to check whether the Z score I have just created is greater or less than 0:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars$mpg_type <- ifelse(mtcars$mpg_z_score <= 0, \"below\", \"above\")\n```\n:::\n\n\nThe `ifelse()` block looks at whether the Z Score is below 0, if so tag as below average, otherwise show this as above.\n\nThe next two steps are to convert the Car Brand into a unique factor and to sort by the Z Score calculations:\n\nNow, I have everything I need to start to compute the plot. Great stuff, so let's get plotting.\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars <- mtcars[order(mtcars$mpg_z_score), ] # Ascending sort on Z Score\nmtcars$CarBrand <- factor(mtcars$CarBrand, levels = mtcars$CarBrand)\n```\n:::\n\n\n# Creating the plot\n\nFirst, I will start with creating the base plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = CarBrand, y = mpg_z_score, label = mpg_z_score))\n```\n:::\n\n\nHere, I pass in the `mtcars` data frame and set the aesthetics layer (aes) of the x axis to the brand of car (CarBrand). The y axis is the Z score I created for miles per gallon (mpg) and the label is also set to the z score.\n\nNext, I will add on the geom_bar geometry:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = CarBrand, y = mpg_z_score, label = mpg_z_score)) +\n  geom_bar(stat = \"identity\", aes(fill = mpg_type), width = .5)\n```\n:::\n\n\nThis indicates that I need to use the mpg_z_score field by forcing the `stat=\"identity\"` option. If this was not added, then it would simply count the number of times the Car Brand appears as a frequency count (not what I want!). Then, I stipulate the fill type of the bar to be equal to whether the value deviates above and below 0 – remember we created a field in the data preparation stage to store whether this deviates below and above 0 and called it mpg_type. The last parameter is the width parameter to indicate the width of the bars.\n\nNext:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = CarBrand, y = mpg_z_score, label = mpg_z_score)) +\n  geom_bar(stat = \"identity\", aes(fill = mpg_type), width = .5) +\n  scale_fill_manual(\n    name = \"Mileage (deviation)\",\n    labels = c(\"Above Average\", \"Below Average\"),\n    values = c(\"above\" = \"#00ba38\", \"below\" = \"#0b8fd3\")\n  )\n```\n:::\n\n\nI use the `scale_fill_manual()` ggplot option to add the name to the legend, specify the label names using the combine function and stipulate that the values that are above average need to be hex coded by the value and the below values to a different code. I have weirdly chosen blue and green as an alternative to red, as I know we have accessibility there. We are nearly there, the final step is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(mtcars, aes(x = CarBrand, y = mpg_z_score, label = mpg_z_score)) +\n  geom_bar(stat = \"identity\", aes(fill = mpg_type), width = .5) +\n  scale_fill_manual(\n    name = \"Mileage (deviation)\",\n    labels = c(\"Above Average\", \"Below Average\"),\n    values = c(\"above\" = \"#00ba38\", \"below\" = \"#0b8fd3\")\n  ) +\n  labs(\n    subtitle = \"Z score (normalised) mileage for mtcars'\",\n    title = \"Diverging Bar Plot (ggplot2)\", caption = \"Produced by Gary Hutson\"\n  ) +\n  coord_flip()\n```\n:::\n\n\nHere, I have added the labs layer on to the plot. This is a way to label your plots to show more meaningful values than would be included by default. So, within labs I use subtitle, title and caption to add labels to the chart. Finally, the important command is to add the `coord_flip()` command to the chart – without this you would have vertical bars instead of horizontal. I think this type of chart looks better horizontal, thus the reason for the inclusion of the command.\n\nThe final chart, looks as illustrated hereunder:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](diverging-bar-charts-plotting-variance-with-ggplot2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThis blog was written by Gary Hutson, Principal Analyst, Activity & Access Team, Information & Insight at Nottingham University Hospitals NHS Trust, and was originally posted at [Hutson-Hacks](http://hutsons-hacks.info/diverging-bar-charts-plotting-variance-with-ggplot2).\n\nThis blog has been formatted to remove [Latin Abbreviations](https://nhsrway.nhsrcommunity.com/style-guides.html#avoid-latin-abbreviation) and edited for [NHS-R Style](https://nhsrway.nhsrcommunity.com/style-guides.html#referencing-r-packages-and-functions-in-text) and to ensure running of code in Quarto.\n",
    "supporting": [
      "diverging-bar-charts-plotting-variance-with-ggplot2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}