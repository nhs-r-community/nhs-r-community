{
  "hash": "e4eeeabf1707b92363ef61e2c8268355",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"NHSRdatasets meets runcharter\"\ndate: \"12 February 2020\"\ndate-modified: \"11 July 2024\"\ncategories:\n  - Data\n  - Packages\n  - Run charts\n  - Statistics\nauthor: John MacKintosh\nsubtitle: >\n  \"\"\n---\n\n# Background\n\nThe {NHSRdatasets} package made it to CRAN recently, and as it is designed for use by NHS data analysts, and I am an NHS data analyst, let's take a look at it. Thanks to Chris Mainey and Tom Jemmett for getting this together.\n\n# Load packages and data\n\nAs above let's load what we need for this session. The {runcharter} package is built using {data.table}, but I'm using {dplyr} in this main section to show that you don't need to know {data.table} to use it.\n\n:::{.callout-tip collapse=false appearance='default' icon=true}\n## Installing from GitHub\nSome packages, like {runcharter} are not on CRAN and can be installed using another package, in this case {remotes} also needs to be installed.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(NHSRdatasets)\nlibrary(runcharter) # remotes::install_github(\"johnmackintosh/runcharter\")\nlibrary(dplyr)\nlibrary(skimr)\n```\n:::\n\n\nHowever- seriously, do take a look at {data.table}. It's not as hard to understand as some might have you believe. A little bit of effort pays off. You can load the {runcharter} package from github using the {remotes} package. (I've managed to install it on Windows and Ubuntu. Mac OS? No idea, I have no experience of that).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nae <- data(\"ae_attendances\") # a promise\nae <- ae_attendances #  a string\nrm(ae_attendances) # just typing 'ae' brings it to life in the environment\n```\n:::\n\n\nThat felt a bit glitchy. There has to be a sleeker way to load and assign a built in dataset but I couldn't find one. Cursory google to [Stackoverflow](https://stackoverflow.com/questions/30951204/load-dataset-from-r-package-using-data-assign-it-directly-to-a-variable).\n\nLet's have a look at the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(ae)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 12,765\nColumns: 6\n$ period      <date> 2017-03-01, 2017-03-01, 2017-03-01, 2017-03-01, 2017-03-0…\n$ org_code    <fct> RF4, RF4, RF4, R1H, R1H, R1H, AD913, RYX, RQM, RQM, RJ6, R…\n$ type        <fct> 1, 2, other, 1, 2, other, other, other, 1, other, 1, other…\n$ attendances <dbl> 21289, 813, 2850, 30210, 807, 11352, 4381, 19562, 17414, 7…\n$ breaches    <dbl> 2879, 22, 6, 5902, 11, 136, 2, 258, 2030, 86, 1322, 140, 0…\n$ admissions  <dbl> 5060, 0, 0, 6943, 0, 0, 0, 0, 3597, 0, 2202, 0, 0, 0, 3360…\n```\n\n\n:::\n:::\n\n\nLot's of factors. I'm actually very grateful for this package, as it caused me major issues when I first tried to plot this data using an earlier version of {runcharter.} I hadn't considered factors as a possible grouping variable, which was a pretty big miss, as all the facets were out of order. All sorted now.\n\nThere's way too much data for my tiny laptop screen, so I will filter the data for type 1 departments – the package help gives us a great link to explain what this means\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntype1 <- ae %>%\n  filter(type == 1) %>%\n  arrange(period)\n\n# plot attendances\np <- runcharter(type1,\n  med_rows = 13, # median of first 13 points\n  runlength = 9, # find a run of 9 consecutive points\n  direction = \"above\", # find run above the original median\n  datecol = period,\n  grpvar = org_code,\n  yval = attendances\n)\n```\n:::\n\n\nThe runcharter function returns both a plot, and a data.table/ data.frame showing a summary of any runs in the desired direction (I'm assuming folk reading this have a passing knowledge of run charts, but if not, you can look at the [package vignette](https://www.johnmackintosh.com/projects/runcharter/), which is the cause of most of my commits!!)\n\nDon't try loading the plot right now, because it is huge, and takes ages. If we look at the summary dataframe, we can see 210 rows, a fairly decent portion of which relate to significant increases above the original median value\n\n\n::: {.cell}\n\n```{.r .cell-code}\np$sustained\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     org_code median start_date   end_date  extend_to  run_type\n        <ord>  <num>     <Date>     <Date>     <Date>    <char>\n  1:      R0A  21430 2017-10-01 2018-10-01 2019-03-01  baseline\n  2:      R1F   3477 2016-04-01 2017-04-01 2017-05-01  baseline\n  3:      R1H  28843 2016-04-01 2017-04-01 2019-03-01  baseline\n  4:      R1K  11733 2016-04-01 2017-04-01 2019-03-01  baseline\n  5:      RA2   5854 2016-04-01 2017-04-01 2018-03-01  baseline\n ---                                                           \n206:      RGN  12473 2018-05-01 2019-01-01 2019-03-01 sustained\n207:      RLT   6977 2018-03-01 2018-11-01 2019-03-01 sustained\n208:      RQ8   8456 2018-03-01 2018-11-01 2019-03-01 sustained\n209:      RTE  12610 2018-05-01 2019-01-01 2019-03-01 sustained\n210:      RVV  14582 2018-03-01 2018-11-01 2019-03-01 sustained\n```\n\n\n:::\n:::\n\n\nLet's use {skimr} to get a sense of this\n\n\n::: {.cell}\n\n```{.r .cell-code}\nskimr::skim(p$sustained)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |            |\n|:------------------------|:-----------|\n|Name                     |p$sustained |\n|Number of rows           |210         |\n|Number of columns        |6           |\n|Key                      |NULL        |\n|_______________________  |            |\n|Column type frequency:   |            |\n|character                |1           |\n|Date                     |3           |\n|factor                   |1           |\n|numeric                  |1           |\n|________________________ |            |\n|Group variables          |None        |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|run_type      |         0|             1|   8|   9|     0|        2|          0|\n\n\n**Variable type: Date**\n\n|skim_variable | n_missing| complete_rate|min        |max        |median     | n_unique|\n|:-------------|---------:|-------------:|:----------|:----------|:----------|--------:|\n|start_date    |         0|             1|2016-04-01 |2018-07-01 |2016-04-01 |        9|\n|end_date      |         0|             1|2017-04-01 |2019-03-01 |2017-04-01 |        9|\n|extend_to     |         0|             1|2017-05-01 |2019-03-01 |2019-03-01 |        7|\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts                     |\n|:-------------|---------:|-------------:|:-------|--------:|:------------------------------|\n|org_code      |         0|             1|TRUE    |      139|RA4: 3, RDD: 3, RDE: 3, RGN: 3 |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|   mean|      sd|   p0|     p25|  p50|      p75|  p100|hist  |\n|:-------------|---------:|-------------:|------:|-------:|----:|-------:|----:|--------:|-----:|:-----|\n|median        |         0|             1| 9389.8| 4317.54| 3477| 6468.25| 8413| 11311.25| 29102|▇▅▁▁▁ |\n\n\n:::\n:::\n\n\nTo keep this manageable, I'm going to filter out for areas that have median admissions > 10000 (based on the first 13 data points)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhigh_admits <- p$sustained %>%\n  filter(median > 10000 & run_type == \"sustained\") %>%\n  select(org_code)\n```\n:::\n\n\nThen I change the `org_code` from factor to character, and pull out unique values. I'm sure there is a slicker way of doing this, but it's getting late, and I don't get paid for this..\n\nI use the result to create a smaller data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhigh_admits$org_code <- as.character(high_admits$org_code)\n\ntype1_high <- type1 %>%\n  filter(org_code %in% high_admits$org_code)\n```\n:::\n\n\nAnd now I can produce a plot that fits on screen. I've made the individual scales free along the y axis, and added titles and so on\n\n\n::: {.cell}\n\n```{.r .cell-code}\np2 <- runcharter(type1_high,\n  med_rows = 13, # median of first 13 points as before\n  runlength = 9, # find a run of 9 consecutive points\n  direction = \"above\",\n  datecol = period,\n  grpvar = org_code,\n  yval = attendances,\n  facet_scales = \"free_y\",\n  facet_cols = 4,\n  chart_title = \"Increased attendances in selected Type 1 AE depts\",\n  chart_subtitle = \"Data covers 2016/17 to 2018/19\",\n  chart_caption = \"Source : NHSRDatasets\",\n  chart_breaks = \"6 months\"\n)\n```\n:::\n\n\nLet's look at the sustained dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\np2$sustained\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    org_code median start_date   end_date  extend_to  run_type\n       <ord>  <num>     <Date>     <Date>     <Date>    <char>\n 1:      RCB   9121 2016-04-01 2017-04-01 2018-03-01  baseline\n 2:      RDD  11249 2016-04-01 2017-04-01 2017-05-01  baseline\n 3:      RDE   7234 2016-04-01 2017-04-01 2017-05-01  baseline\n 4:      RGN   7912 2016-04-01 2017-04-01 2017-05-01  baseline\n 5:      RJ1  12240 2016-04-01 2017-04-01 2018-03-01  baseline\n 6:      RJE  14568 2016-04-01 2017-04-01 2018-05-01  baseline\n 7:      RJL  11262 2016-04-01 2017-04-01 2018-03-01  baseline\n 8:      RQM  16478 2016-04-01 2017-04-01 2018-03-01  baseline\n 9:      RRK   9584 2016-04-01 2017-04-01 2018-03-01  baseline\n10:      RTE  11303 2016-04-01 2017-04-01 2017-05-01  baseline\n11:      RTG  11344 2016-04-01 2017-04-01 2018-07-01  baseline\n12:      RTR  10362 2016-04-01 2017-04-01 2018-03-01  baseline\n13:      RVV  12700 2016-04-01 2017-04-01 2017-05-01  baseline\n14:      RW6  22114 2016-04-01 2017-04-01 2017-05-01  baseline\n15:      RWE  12275 2016-04-01 2017-04-01 2017-05-01  baseline\n16:      RWF  11939 2016-04-01 2017-04-01 2018-03-01  baseline\n17:      RWP   9976 2016-04-01 2017-04-01 2018-03-01  baseline\n18:      RXC   9396 2016-04-01 2017-04-01 2018-03-01  baseline\n19:      RXH  12494 2016-04-01 2017-04-01 2018-03-01  baseline\n20:      RXP  10727 2016-04-01 2017-04-01 2017-05-01  baseline\n21:      RYR  11578 2016-04-01 2017-04-01 2018-03-01  baseline\n22:      RCB  10062 2018-03-01 2018-11-01 2019-03-01 sustained\n23:      RDD  12093 2017-05-01 2018-01-01 2018-03-01 sustained\n24:      RDE   7637 2017-05-01 2018-01-01 2018-03-01 sustained\n25:      RGN  11896 2017-05-01 2018-01-01 2018-05-01 sustained\n26:      RJ1  13570 2018-03-01 2018-11-01 2019-03-01 sustained\n27:      RJE  15183 2018-05-01 2019-01-01 2019-03-01 sustained\n28:      RJL  11972 2018-03-01 2018-11-01 2019-03-01 sustained\n29:      RQM  18560 2018-03-01 2018-11-01 2019-03-01 sustained\n30:      RRK  29102 2018-03-01 2018-11-01 2019-03-01 sustained\n31:      RTE  11772 2017-05-01 2018-01-01 2018-05-01 sustained\n32:      RTG  17169 2018-07-01 2019-03-01 2019-03-01 sustained\n33:      RTR  10832 2018-03-01 2018-11-01 2019-03-01 sustained\n34:      RVV  13295 2017-05-01 2018-01-01 2018-03-01 sustained\n35:      RW6  22845 2017-05-01 2018-01-01 2019-03-01 sustained\n36:      RWE  18173 2017-05-01 2018-01-01 2019-03-01 sustained\n37:      RWF  12793 2018-03-01 2018-11-01 2019-03-01 sustained\n38:      RWP  10358 2018-03-01 2018-11-01 2019-03-01 sustained\n39:      RXC  10279 2018-03-01 2018-11-01 2019-03-01 sustained\n40:      RXH  13158 2018-03-01 2018-11-01 2019-03-01 sustained\n41:      RXP  11314 2017-05-01 2018-01-01 2019-03-01 sustained\n42:      RYR  11970 2018-03-01 2018-11-01 2019-03-01 sustained\n43:      RDD  12776 2018-03-01 2018-11-01 2019-03-01 sustained\n44:      RDE  15322 2018-03-01 2018-11-01 2019-03-01 sustained\n45:      RGN  12473 2018-05-01 2019-01-01 2019-03-01 sustained\n46:      RTE  12610 2018-05-01 2019-01-01 2019-03-01 sustained\n47:      RVV  14582 2018-03-01 2018-11-01 2019-03-01 sustained\n    org_code median start_date   end_date  extend_to  run_type\n```\n\n\n:::\n:::\n\n\nAnd of course, the plot itself\n\n\n::: {.cell}\n\n```{.r .cell-code}\np2$runchart\n```\n\n::: {.cell-output-display}\n![](nhsrdatasets-meets-runcharter_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nI haven't looked into the actual data too much, but there are some interesting little facets here – what's the story with RDE, RRK and RTG for example? I don't know which Trusts these codes represent, but they show a marked increase. Of course, generally, all areas show an increase at some point.\n\nThe RGN (top right) and RVV (mid left) show the reason why I worked on this package – we can see that there has been more than one run above the median. . Performing this analysis in Excel is not much fun after a while.\n\nThere is a lot more I can look at with this package, and we in the NHS-R community are always [happy to receive more datasets](https://github.com/nhs-r-community/NHSRdatasets) for inclusion, so please contribute if you can.\n\nThis post was originally published on [johnmackintosh.net](https://johnmackintosh.net/blog/2019-12-03-Plotting-NHSRDatasets-with-runcharter/) but has kindly been re-posted to the NHS-R community blog.\n\nIt has also been formatted to remove [Latin Abbreviations](https://nhsrway.nhsrcommunity.com/style-guides.html#avoid-latin-abbreviation), edited for [NHS-R Style](https://nhsrway.nhsrcommunity.com/style-guides.html#referencing-r-packages-and-functions-in-text) and to ensure running of code in Quarto.\n\n",
    "supporting": [
      "nhsrdatasets-meets-runcharter_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}